// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shopular/ent/category"
	"shopular/ent/predicate"
	"shopular/ent/product"
	"shopular/ent/subcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubCategoryUpdate is the builder for updating SubCategory entities.
type SubCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *SubCategoryMutation
}

// Where appends a list predicates to the SubCategoryUpdate builder.
func (scu *SubCategoryUpdate) Where(ps ...predicate.SubCategory) *SubCategoryUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetTitle sets the "title" field.
func (scu *SubCategoryUpdate) SetTitle(s string) *SubCategoryUpdate {
	scu.mutation.SetTitle(s)
	return scu
}

// SetDescription sets the "description" field.
func (scu *SubCategoryUpdate) SetDescription(s string) *SubCategoryUpdate {
	scu.mutation.SetDescription(s)
	return scu
}

// SetCreatedAt sets the "created_at" field.
func (scu *SubCategoryUpdate) SetCreatedAt(t time.Time) *SubCategoryUpdate {
	scu.mutation.SetCreatedAt(t)
	return scu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scu *SubCategoryUpdate) SetNillableCreatedAt(t *time.Time) *SubCategoryUpdate {
	if t != nil {
		scu.SetCreatedAt(*t)
	}
	return scu
}

// SetUpdatedAt sets the "updated_at" field.
func (scu *SubCategoryUpdate) SetUpdatedAt(t time.Time) *SubCategoryUpdate {
	scu.mutation.SetUpdatedAt(t)
	return scu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scu *SubCategoryUpdate) SetNillableUpdatedAt(t *time.Time) *SubCategoryUpdate {
	if t != nil {
		scu.SetUpdatedAt(*t)
	}
	return scu
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (scu *SubCategoryUpdate) SetCategoryID(id int) *SubCategoryUpdate {
	scu.mutation.SetCategoryID(id)
	return scu
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (scu *SubCategoryUpdate) SetNillableCategoryID(id *int) *SubCategoryUpdate {
	if id != nil {
		scu = scu.SetCategoryID(*id)
	}
	return scu
}

// SetCategory sets the "category" edge to the Category entity.
func (scu *SubCategoryUpdate) SetCategory(c *Category) *SubCategoryUpdate {
	return scu.SetCategoryID(c.ID)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (scu *SubCategoryUpdate) AddProductIDs(ids ...int) *SubCategoryUpdate {
	scu.mutation.AddProductIDs(ids...)
	return scu
}

// AddProduct adds the "product" edges to the Product entity.
func (scu *SubCategoryUpdate) AddProduct(p ...*Product) *SubCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scu.AddProductIDs(ids...)
}

// Mutation returns the SubCategoryMutation object of the builder.
func (scu *SubCategoryUpdate) Mutation() *SubCategoryMutation {
	return scu.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (scu *SubCategoryUpdate) ClearCategory() *SubCategoryUpdate {
	scu.mutation.ClearCategory()
	return scu
}

// ClearProduct clears all "product" edges to the Product entity.
func (scu *SubCategoryUpdate) ClearProduct() *SubCategoryUpdate {
	scu.mutation.ClearProduct()
	return scu
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (scu *SubCategoryUpdate) RemoveProductIDs(ids ...int) *SubCategoryUpdate {
	scu.mutation.RemoveProductIDs(ids...)
	return scu
}

// RemoveProduct removes "product" edges to Product entities.
func (scu *SubCategoryUpdate) RemoveProduct(p ...*Product) *SubCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *SubCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(scu.hooks) == 0 {
		affected, err = scu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scu.mutation = mutation
			affected, err = scu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(scu.hooks) - 1; i >= 0; i-- {
			if scu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, scu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (scu *SubCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *SubCategoryUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *SubCategoryUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scu *SubCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subcategory.Table,
			Columns: subcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subcategory.FieldID,
			},
		},
	}
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Title(); ok {
		_spec.SetField(subcategory.FieldTitle, field.TypeString, value)
	}
	if value, ok := scu.mutation.Description(); ok {
		_spec.SetField(subcategory.FieldDescription, field.TypeString, value)
	}
	if value, ok := scu.mutation.CreatedAt(); ok {
		_spec.SetField(subcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scu.mutation.UpdatedAt(); ok {
		_spec.SetField(subcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if scu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcategory.ProductTable,
			Columns: subcategory.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.RemovedProductIDs(); len(nodes) > 0 && !scu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcategory.ProductTable,
			Columns: subcategory.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcategory.ProductTable,
			Columns: subcategory.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SubCategoryUpdateOne is the builder for updating a single SubCategory entity.
type SubCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubCategoryMutation
}

// SetTitle sets the "title" field.
func (scuo *SubCategoryUpdateOne) SetTitle(s string) *SubCategoryUpdateOne {
	scuo.mutation.SetTitle(s)
	return scuo
}

// SetDescription sets the "description" field.
func (scuo *SubCategoryUpdateOne) SetDescription(s string) *SubCategoryUpdateOne {
	scuo.mutation.SetDescription(s)
	return scuo
}

// SetCreatedAt sets the "created_at" field.
func (scuo *SubCategoryUpdateOne) SetCreatedAt(t time.Time) *SubCategoryUpdateOne {
	scuo.mutation.SetCreatedAt(t)
	return scuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scuo *SubCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *SubCategoryUpdateOne {
	if t != nil {
		scuo.SetCreatedAt(*t)
	}
	return scuo
}

// SetUpdatedAt sets the "updated_at" field.
func (scuo *SubCategoryUpdateOne) SetUpdatedAt(t time.Time) *SubCategoryUpdateOne {
	scuo.mutation.SetUpdatedAt(t)
	return scuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scuo *SubCategoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *SubCategoryUpdateOne {
	if t != nil {
		scuo.SetUpdatedAt(*t)
	}
	return scuo
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (scuo *SubCategoryUpdateOne) SetCategoryID(id int) *SubCategoryUpdateOne {
	scuo.mutation.SetCategoryID(id)
	return scuo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (scuo *SubCategoryUpdateOne) SetNillableCategoryID(id *int) *SubCategoryUpdateOne {
	if id != nil {
		scuo = scuo.SetCategoryID(*id)
	}
	return scuo
}

// SetCategory sets the "category" edge to the Category entity.
func (scuo *SubCategoryUpdateOne) SetCategory(c *Category) *SubCategoryUpdateOne {
	return scuo.SetCategoryID(c.ID)
}

// AddProductIDs adds the "product" edge to the Product entity by IDs.
func (scuo *SubCategoryUpdateOne) AddProductIDs(ids ...int) *SubCategoryUpdateOne {
	scuo.mutation.AddProductIDs(ids...)
	return scuo
}

// AddProduct adds the "product" edges to the Product entity.
func (scuo *SubCategoryUpdateOne) AddProduct(p ...*Product) *SubCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scuo.AddProductIDs(ids...)
}

// Mutation returns the SubCategoryMutation object of the builder.
func (scuo *SubCategoryUpdateOne) Mutation() *SubCategoryMutation {
	return scuo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (scuo *SubCategoryUpdateOne) ClearCategory() *SubCategoryUpdateOne {
	scuo.mutation.ClearCategory()
	return scuo
}

// ClearProduct clears all "product" edges to the Product entity.
func (scuo *SubCategoryUpdateOne) ClearProduct() *SubCategoryUpdateOne {
	scuo.mutation.ClearProduct()
	return scuo
}

// RemoveProductIDs removes the "product" edge to Product entities by IDs.
func (scuo *SubCategoryUpdateOne) RemoveProductIDs(ids ...int) *SubCategoryUpdateOne {
	scuo.mutation.RemoveProductIDs(ids...)
	return scuo
}

// RemoveProduct removes "product" edges to Product entities.
func (scuo *SubCategoryUpdateOne) RemoveProduct(p ...*Product) *SubCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return scuo.RemoveProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *SubCategoryUpdateOne) Select(field string, fields ...string) *SubCategoryUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated SubCategory entity.
func (scuo *SubCategoryUpdateOne) Save(ctx context.Context) (*SubCategory, error) {
	var (
		err  error
		node *SubCategory
	)
	if len(scuo.hooks) == 0 {
		node, err = scuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			scuo.mutation = mutation
			node, err = scuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(scuo.hooks) - 1; i >= 0; i-- {
			if scuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = scuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, scuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubCategory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubCategoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *SubCategoryUpdateOne) SaveX(ctx context.Context) *SubCategory {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *SubCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *SubCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scuo *SubCategoryUpdateOne) sqlSave(ctx context.Context) (_node *SubCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subcategory.Table,
			Columns: subcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subcategory.FieldID,
			},
		},
	}
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcategory.FieldID)
		for _, f := range fields {
			if !subcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Title(); ok {
		_spec.SetField(subcategory.FieldTitle, field.TypeString, value)
	}
	if value, ok := scuo.mutation.Description(); ok {
		_spec.SetField(subcategory.FieldDescription, field.TypeString, value)
	}
	if value, ok := scuo.mutation.CreatedAt(); ok {
		_spec.SetField(subcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := scuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if scuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcategory.CategoryTable,
			Columns: []string{subcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcategory.ProductTable,
			Columns: subcategory.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.RemovedProductIDs(); len(nodes) > 0 && !scuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcategory.ProductTable,
			Columns: subcategory.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcategory.ProductTable,
			Columns: subcategory.ProductPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubCategory{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
