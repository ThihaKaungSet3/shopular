// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"shopular/ent/product"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// ImageUrl holds the value of the "imageUrl" field.
	ImageUrl string `json:"imageUrl,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges ProductEdges `json:"edges"`
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// Sub holds the value of the sub edge.
	Sub []*SubCategory `json:"sub,omitempty"`
	// Cart holds the value of the cart edge.
	Cart []*Cart `json:"cart,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SubOrErr returns the Sub value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) SubOrErr() ([]*SubCategory, error) {
	if e.loadedTypes[0] {
		return e.Sub, nil
	}
	return nil, &NotLoadedError{edge: "sub"}
}

// CartOrErr returns the Cart value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) CartOrErr() ([]*Cart, error) {
	if e.loadedTypes[1] {
		return e.Cart, nil
	}
	return nil, &NotLoadedError{edge: "cart"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case product.FieldID, product.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case product.FieldTitle, product.FieldImageUrl, product.FieldSummary:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pr.Title = value.String
			}
		case product.FieldImageUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imageUrl", values[i])
			} else if value.Valid {
				pr.ImageUrl = value.String
			}
		case product.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				pr.Summary = value.String
			}
		case product.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pr.Price = value.Float64
			}
		case product.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pr.Quantity = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySub queries the "sub" edge of the Product entity.
func (pr *Product) QuerySub() *SubCategoryQuery {
	return (&ProductClient{config: pr.config}).QuerySub(pr)
}

// QueryCart queries the "cart" edge of the Product entity.
func (pr *Product) QueryCart() *CartQuery {
	return (&ProductClient{config: pr.config}).QueryCart(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("title=")
	builder.WriteString(pr.Title)
	builder.WriteString(", ")
	builder.WriteString("imageUrl=")
	builder.WriteString(pr.ImageUrl)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(pr.Summary)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", pr.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
